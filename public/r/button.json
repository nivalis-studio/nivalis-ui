{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "dependencies": [
    "@radix-ui/react-slot"
  ],
  "files": [
    {
      "path": "src/registry/base/ui/button.tsx",
      "content": "\"use client\";\n\nimport { cva } from \"class-variance-authority\";\nimport { Slot } from \"radix-ui\";\nimport { Spinner } from \"@medusajs/icons\";\nimport { cn } from \"@/lib/classnames\";\nimport type { VariantProps } from \"class-variance-authority\";\n\nconst buttonVariants = cva(\n  cn(\n    \"relative inline-flex w-fit items-center justify-center overflow-hidden rounded-md outline-none transition-fg\",\n    \"disabled:bg-bg-disabled disabled:border-border-base disabled:text-fg-disabled disabled:shadow-buttons-neutral disabled:after:hidden\",\n    \"after:absolute after:inset-0 after:transition-fg after:content-['']\",\n  ),\n  {\n    variants: {\n      variant: {\n        primary: cn(\n          \"shadow-buttons-inverted text-contrast-fg-primary bg-button-inverted after:button-inverted-gradient\",\n          \"hover:bg-button-inverted-hover hover:after:button-inverted-hover-gradient\",\n          \"active:bg-button-inverted-pressed active:after:button-inverted-pressed-gradient\",\n          \"focus-visible:!shadow-buttons-inverted-focus\",\n        ),\n        secondary: cn(\n          \"shadow-buttons-neutral text-fg-base bg-button-neutral after:button-neutral-gradient\",\n          \"hover:bg-button-neutral-hover hover:after:button-neutral-hover-gradient\",\n          \"active:bg-button-neutral-pressed active:after:button-neutral-pressed-gradient\",\n          \"focus-visible:shadow-buttons-neutral-focus\",\n        ),\n        transparent: cn(\n          \"after:hidden\",\n          \"text-fg-base bg-button-transparent\",\n          \"hover:bg-button-transparent-hover\",\n          \"active:bg-button-transparent-pressed\",\n          \"focus-visible:shadow-buttons-neutral-focus focus-visible:bg-bg-base\",\n          \"disabled:!bg-transparent disabled:!shadow-none\",\n        ),\n        danger: cn(\n          \"shadow-buttons-colored shadow-buttons-danger text-fg-on-color bg-button-danger after:button-danger-gradient\",\n          \"hover:bg-button-danger-hover hover:after:button-danger-hover-gradient\",\n          \"active:bg-button-danger-pressed active:after:button-danger-pressed-gradient\",\n          \"focus-visible:shadow-buttons-danger-focus\",\n        ),\n      },\n      size: {\n        small: \"txt-compact-small-plus gap-x-1.5 px-2 py-1\",\n        base: \"txt-compact-small-plus gap-x-1.5 px-3 py-1.5\",\n        large: \"txt-compact-medium-plus gap-x-1.5 px-4 py-2.5\",\n        xlarge: \"txt-compact-large-plus gap-x-1.5 px-5 py-3.5\",\n      },\n    },\n    defaultVariants: {\n      size: \"base\",\n      variant: \"primary\",\n    },\n  },\n);\n\ntype ButtonProps = React.ComponentProps<\"button\"> &\n  VariantProps<typeof buttonVariants> & {\n    readonly isLoading?: boolean;\n    // eslint-disable-next-line react/boolean-prop-naming\n    readonly asChild?: boolean;\n  };\n\n/*\n * This component is based on the `button` element and supports all of its props\n */\nconst Button = ({\n  /**\n   * The button's style.\n   */\n  variant = \"primary\",\n  /**\n   * The button's size.\n   */\n  size = \"base\",\n  className,\n  /**\n   * Whether to remove the wrapper `button` element and use the\n   * passed child element instead.\n   */\n  asChild = false,\n  children,\n  /**\n   * Whether to show a loading spinner.\n   */\n  isLoading = false,\n  disabled,\n  ...props\n}: ButtonProps) => {\n  const Component = asChild ? Slot.Root : \"button\";\n\n  /*\n   * In the case of a button where asChild is true, and isLoading is true, we ensure that\n   * only on element is passed as a child to the Slot component. This is because the Slot\n   * component only accepts a single child.\n   */\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  const renderInner = () => {\n    if (isLoading) {\n      return (\n        <span className='pointer-events-none'>\n          <div\n            className={cn(\n              \"bg-bg-disabled absolute inset-0 flex items-center justify-center rounded-md\",\n            )}\n          >\n            <Spinner className='animate-spin' />\n          </div>\n          {children}\n        </span>\n      );\n    }\n\n    return children;\n  };\n\n  return (\n    <Component\n      {...props}\n      className={cn(buttonVariants({ variant, size }), className)}\n      disabled={disabled ?? isLoading}\n    >\n      {renderInner()}\n    </Component>\n  );\n};\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "type": "registry:ui"
    }
  ]
}